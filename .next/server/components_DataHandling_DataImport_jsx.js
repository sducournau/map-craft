/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_DataHandling_DataImport_jsx";
exports.ids = ["components_DataHandling_DataImport_jsx"];
exports.modules = {

/***/ "./components/DataHandling/DataImport.jsx":
/*!************************************************!*\
  !*** ./components/DataHandling/DataImport.jsx ***!
  \************************************************/
/***/ (() => {

eval("const handleFileUpload = useCallback(async (event)=>{\n    const file = event.target.files?.[0];\n    if (!file) return;\n    setLoading(true);\n    setError(null);\n    try {\n        // Validate file size\n        if (file.size > 50 * 1024 * 1024) {\n            throw new Error(\"Le fichier est trop volumineux (limite de 50MB)\");\n        }\n        const fileExtension = file.name.split(\".\").pop()?.toLowerCase();\n        // Validate supported file extensions\n        if (![\n            \"geojson\",\n            \"json\",\n            \"csv\",\n            \"gpkg\",\n            \"zip\"\n        ].includes(fileExtension)) {\n            throw new Error(`Format de fichier non supporté: ${fileExtension}. Formats acceptés: GeoJSON, CSV, GeoPackage, Shapefile (ZIP)`);\n        }\n        const reader = new FileReader();\n        // Set up promise-based file reader\n        const readFilePromise = new Promise((resolve, reject)=>{\n            reader.onload = (e)=>resolve(e.target.result);\n            reader.onerror = (e)=>reject(new Error(\"Erreur lors de la lecture du fichier\"));\n        });\n        // Start reading the file\n        if (fileExtension === \"csv\") {\n            reader.readAsText(file);\n        } else {\n            reader.readAsArrayBuffer(file);\n        }\n        // Wait for file to be read\n        const result = await readFilePromise;\n        // Process file based on its type\n        let data;\n        if (fileExtension === \"geojson\" || fileExtension === \"json\") {\n            try {\n                // Handle GeoJSON\n                data = JSON.parse(result);\n                data = formatGeoJson(data);\n                // Basic validation\n                if (!data.type || data.type !== \"FeatureCollection\" || !Array.isArray(data.features)) {\n                    throw new Error(\"Format GeoJSON invalide\");\n                }\n            } catch (parseError) {\n                throw new Error(`Erreur de parsing JSON: ${parseError.message}`);\n            }\n        } else if (fileExtension === \"csv\") {\n            // Handle CSV with custom options if provided\n            try {\n                data = csvToGeoJson(result, dataType === \"auto\" ? {} : customOptions);\n                // Check if any features were created\n                if (!data.features || data.features.length === 0) {\n                    throw new Error(\"Aucune donn\\xe9e g\\xe9ospatiale n'a pu \\xeatre extraite du CSV\");\n                }\n            } catch (csvError) {\n                throw new Error(`Erreur lors de la conversion du CSV: ${csvError.message}`);\n            }\n        } else if (fileExtension === \"gpkg\") {\n            // Handle GeoPackage\n            try {\n                data = await processGeoPackage(file);\n            } catch (gpkgError) {\n                throw new Error(`Erreur lors du traitement du GeoPackage: ${gpkgError.message}`);\n            }\n        } else if (fileExtension === \"zip\") {\n            // Handle Shapefile in ZIP\n            try {\n                data = await processShapefile(result);\n            } catch (shpError) {\n                throw new Error(`Erreur lors du traitement du Shapefile: ${shpError.message}`);\n            }\n        }\n        // Final validation\n        if (!data || !data.features || data.features.length === 0) {\n            throw new Error(\"Aucune donn\\xe9e valide n'a \\xe9t\\xe9 trouv\\xe9e dans le fichier\");\n        }\n        onDataImported(data);\n        if (onClose) onClose();\n    } catch (err) {\n        console.error(\"Error processing file:\", err);\n        setError(`Erreur: ${err.message}`);\n    } finally{\n        setLoading(false);\n    }\n}, [\n    onDataImported,\n    onClose,\n    dataType,\n    customOptions\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/DataHandling/DataImport.jsx\n");

/***/ })

};
;