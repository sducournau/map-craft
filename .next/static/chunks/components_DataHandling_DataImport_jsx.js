/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["components_DataHandling_DataImport_jsx"],{

/***/ "./components/DataHandling/DataImport.jsx":
/*!************************************************!*\
  !*** ./components/DataHandling/DataImport.jsx ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("const handleFileUpload = useCallback(async (event)=>{\n    var _event_target_files;\n    const file = (_event_target_files = event.target.files) === null || _event_target_files === void 0 ? void 0 : _event_target_files[0];\n    if (!file) return;\n    setLoading(true);\n    setError(null);\n    try {\n        var _file_name_split_pop;\n        // Validate file size\n        if (file.size > 50 * 1024 * 1024) {\n            throw new Error(\"Le fichier est trop volumineux (limite de 50MB)\");\n        }\n        const fileExtension = (_file_name_split_pop = file.name.split(\".\").pop()) === null || _file_name_split_pop === void 0 ? void 0 : _file_name_split_pop.toLowerCase();\n        // Validate supported file extensions\n        if (![\n            \"geojson\",\n            \"json\",\n            \"csv\",\n            \"gpkg\",\n            \"zip\"\n        ].includes(fileExtension)) {\n            throw new Error(\"Format de fichier non support\\xe9: \".concat(fileExtension, \". Formats accept\\xe9s: GeoJSON, CSV, GeoPackage, Shapefile (ZIP)\"));\n        }\n        const reader = new FileReader();\n        // Set up promise-based file reader\n        const readFilePromise = new Promise((resolve, reject)=>{\n            reader.onload = (e)=>resolve(e.target.result);\n            reader.onerror = (e)=>reject(new Error(\"Erreur lors de la lecture du fichier\"));\n        });\n        // Start reading the file\n        if (fileExtension === \"csv\") {\n            reader.readAsText(file);\n        } else {\n            reader.readAsArrayBuffer(file);\n        }\n        // Wait for file to be read\n        const result = await readFilePromise;\n        // Process file based on its type\n        let data;\n        if (fileExtension === \"geojson\" || fileExtension === \"json\") {\n            try {\n                // Handle GeoJSON\n                data = JSON.parse(result);\n                data = formatGeoJson(data);\n                // Basic validation\n                if (!data.type || data.type !== \"FeatureCollection\" || !Array.isArray(data.features)) {\n                    throw new Error(\"Format GeoJSON invalide\");\n                }\n            } catch (parseError) {\n                throw new Error(\"Erreur de parsing JSON: \".concat(parseError.message));\n            }\n        } else if (fileExtension === \"csv\") {\n            // Handle CSV with custom options if provided\n            try {\n                data = csvToGeoJson(result, dataType === \"auto\" ? {} : customOptions);\n                // Check if any features were created\n                if (!data.features || data.features.length === 0) {\n                    throw new Error(\"Aucune donn\\xe9e g\\xe9ospatiale n'a pu \\xeatre extraite du CSV\");\n                }\n            } catch (csvError) {\n                throw new Error(\"Erreur lors de la conversion du CSV: \".concat(csvError.message));\n            }\n        } else if (fileExtension === \"gpkg\") {\n            // Handle GeoPackage\n            try {\n                data = await processGeoPackage(file);\n            } catch (gpkgError) {\n                throw new Error(\"Erreur lors du traitement du GeoPackage: \".concat(gpkgError.message));\n            }\n        } else if (fileExtension === \"zip\") {\n            // Handle Shapefile in ZIP\n            try {\n                data = await processShapefile(result);\n            } catch (shpError) {\n                throw new Error(\"Erreur lors du traitement du Shapefile: \".concat(shpError.message));\n            }\n        }\n        // Final validation\n        if (!data || !data.features || data.features.length === 0) {\n            throw new Error(\"Aucune donn\\xe9e valide n'a \\xe9t\\xe9 trouv\\xe9e dans le fichier\");\n        }\n        onDataImported(data);\n        if (onClose) onClose();\n    } catch (err) {\n        console.error(\"Error processing file:\", err);\n        setError(\"Erreur: \".concat(err.message));\n    } finally{\n        setLoading(false);\n    }\n}, [\n    onDataImported,\n    onClose,\n    dataType,\n    customOptions\n]);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/DataHandling/DataImport.jsx\n"));

/***/ })

}]);